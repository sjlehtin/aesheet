# Generated by Django 5.0.6 on 2024-07-14 16:33

from django.db import migrations


def skills(apps, schema_editor):
    Skill = apps.get_model('sheet', 'Skill')
    SkillNew = apps.get_model('sheet', 'SkillNew')

    for skill in Skill.objects.all():
        skill_new = SkillNew()
        skill_new.name = skill.name
        skill_new.description = skill.description
        skill_new.notes = skill.notes
        skill_new.can_be_defaulted = skill.can_be_defaulted
        skill_new.is_specialization = skill.is_specialization

        skill_new.tech_level = skill.tech_level

        skill_new.skill_cost_0 = skill.skill_cost_0
        skill_new.skill_cost_1 = skill.skill_cost_1
        skill_new.skill_cost_2 = skill.skill_cost_2
        skill_new.skill_cost_3 = skill.skill_cost_3

        skill_new.type = skill.type

        skill_new.stat = skill.stat

        skill_new.powered_ref_counter = skill.powered_ref_counter
        skill_new.powered_fit_mod = skill.powered_fit_mod

        skill_new.save()

        for e in skill.required_edges.all():
            skill_new.required_edges.add(e)

    for skill in Skill.objects.all():
        if skill.required_skills.exists():
            skill_new = SkillNew.objects.get(name=skill.name)
            for s in skill.required_skills.all():
                skill_new.required_skills.add(SkillNew.objects.get(name=s.name))



def basefirearms(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    BaseFirearm = apps.get_model('sheet', 'BaseFirearm')
    BaseFirearmNew = apps.get_model('sheet', 'BaseFirearmNew')
    FirearmAmmunitionType = apps.get_model('sheet', 'FirearmAmmunitionType')
    SheetFirearm = apps.get_model('sheet', 'SheetFirearm')

    for fa in BaseFirearm.objects.all():
        new  = BaseFirearmNew()
        new.name = fa.name
        new.short_name = fa.short_name
        new.description = fa.description
        new.notes = fa.notes
        new.draw_initiative = fa.draw_initiative
        new.durability = fa.durability
        new.dp = fa.dp
        new.weight = fa.weight
        new.autofire_rpm = fa.autofire_rpm
        new.autofire_class = fa.autofire_class
        new.sweep_fire_disabled = fa.sweep_fire_disabled
        new.restricted_burst_rounds = fa.restricted_burst_rounds
        new.stock = fa.stock
        new.duration = fa.duration
        new.weapon_class_modifier = fa.weapon_class_modifier
        new.accuracy = fa.accuracy
        new.sight = fa.sight
        new.barrel_length = fa.barrel_length
        new.target_initiative = fa.target_initiative
        new.magazine_size = fa.magazine_size
        new.magazine_weight = fa.magazine_weight
        new.tech_level = fa.tech_level
        new.base_skill = SkillNew.objects.get(name=fa.base_skill.name)
        if fa.skill:
            new.skill = SkillNew.objects.get(name=fa.skill.name)
        if fa.skill2:
            new.skill2 = SkillNew.objects.get(name=fa.skill2.name)
        new.save()

    for fat in FirearmAmmunitionType.objects.all():
        fat.firearm_new = BaseFirearmNew.objects.get(name=fat.firearm.name)
        fat.save()

    for sfa in SheetFirearm.objects.all():
        sfa.base_new = BaseFirearmNew.objects.get(name=sfa.base.name)
        sfa.save()

#     - Add field firearm_new to firearmammunitiontype
#     - Add field firearms_new to sheet
#     - Add field base_new to sheetfirearm


def ranged_weapon_templates(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    RangedWeaponTemplate = apps.get_model('sheet', 'RangedWeaponTemplate')
    RangedWeaponTemplateNew = apps.get_model('sheet', 'RangedWeaponTemplateNew')
    RangedWeapon = apps.get_model('sheet', 'RangedWeapon')

    for rwt in RangedWeaponTemplate.objects.all():
        new = RangedWeaponTemplateNew()
        new.name = rwt.name
        new.description = rwt.description
        new.notes = rwt.notes
        new.durability = rwt.durability
        new.dp = rwt.dp
        new.weight = rwt.weight
        new.num_dice = rwt.num_dice
        new.dice = rwt.dice
        new.extra_damage = rwt.extra_damage
        new.leth = rwt.leth
        new.plus_leth = rwt.plus_leth
        new.roa = rwt.roa
        new.bypass = rwt.bypass
        new.type = rwt.type
        new.ammo_weight = rwt.ammo_weight
        new.target_initiative = rwt.target_initiative
        new.range_s = rwt.range_s
        new.range_m = rwt.range_m
        new.range_l = rwt.range_l
        new.tech_level = rwt.tech_level

        new.base_skill = SkillNew.objects.get(name=rwt.base_skill.name)
        if rwt.skill:
            new.skill = SkillNew.objects.get(name=rwt.skill.name)
        if rwt.skill2:
            new.skill2 = SkillNew.objects.get(name=rwt.skill2.name)

        new.save()

    for rw in RangedWeapon.objects.all():
        rw.base_new = RangedWeaponTemplateNew.objects.get(name=rw.base.name)
        rw.save()


def weapon_templates(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    WeaponTemplate = apps.get_model('sheet', 'WeaponTemplate')
    WeaponTemplateNew = apps.get_model('sheet', 'WeaponTemplateNew')
    Weapon = apps.get_model('sheet', 'Weapon')

    for wt in WeaponTemplate.objects.all():
        new = WeaponTemplateNew()
        new.name = wt.name
        new.description = wt.description
        new.notes = wt.notes
        new.durability = wt.durability
        new.dp = wt.dp
        new.weight = wt.weight
        new.num_dice = wt.num_dice
        new.dice = wt.dice
        new.extra_damage = wt.extra_damage
        new.leth = wt.leth
        new.plus_leth = wt.plus_leth
        new.roa = wt.roa
        new.bypass = wt.bypass
        new.type = wt.type
        new.ccv = wt.ccv
        new.ccv_unskilled_modifier = wt.ccv_unskilled_modifier
        new.defense_leth = wt.defense_leth
        new.is_lance = wt.is_lance
        new.is_shield = wt.is_shield
        new.tech_level = wt.tech_level

        new.base_skill = SkillNew.objects.get(name=wt.base_skill.name)
        if wt.skill:
            new.skill = SkillNew.objects.get(name=wt.skill.name)
        if wt.skill2:
            new.skill2 = SkillNew.objects.get(name=wt.skill2.name)

        new.save()

    for w in Weapon.objects.all():
        w.base_new = WeaponTemplateNew.objects.get(name=w.base.name)
        w.save()


def character_log_entries(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    CharacterLogEntry = apps.get_model('sheet', 'CharacterLogEntry')

    for le in CharacterLogEntry.objects.all():
        if le.skill:
            le.skill_new = SkillNew.objects.get(name=le.skill.name)
            le.save()


def character_skills(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    CharacterSkill = apps.get_model('sheet', 'CharacterSkill')

    for cs in CharacterSkill.objects.all():
        if cs.skill:
            cs.skill_new = SkillNew.objects.get(name=cs.skill.name)
            cs.save()


def edge_skill_bonuses(apps, schema_editor):
    SkillNew = apps.get_model('sheet', 'SkillNew')
    EdgeSkillBonus = apps.get_model('sheet', 'EdgeSkillBonus')

    for sb in EdgeSkillBonus.objects.all():
        if sb.skill:
            sb.skill_new = SkillNew.objects.get(name=sb.skill.name)
            sb.save()


#     - Create model BaseFirearmNew
#     - Add field firearm_new to firearmammunitiontype
#     - Add field firearms_new to sheet
#     - Add field base_new to sheetfirearm
#     - Add field base_skill to basefirearmnew
#     - Add field skill to basefirearmnew
#     - Add field skill2 to basefirearmnew
#     - Create model SkillNew
#     - Create model RangedWeaponTemplateNew
#     - Add field base_new to rangedweapon
#     - Add field base_skill to rangedweapontemplatenew
#     - Add field skill to rangedweapontemplatenew
#     - Add field skill2 to rangedweapontemplatenew
#     - Create model WeaponTemplateNew
#     - Add field base_new to weapon
#     - Add field skill_new to characterlogentry
#     - Add field skill_new to characterskill
#     - Add field skill_new to edgeskillbonus


class Migration(migrations.Migration):
    dependencies = [
        ("sheet", "0077_basefirearmnew_firearmammunitiontype_firearm_new_and_more"),
    ]

    operations = [
        migrations.RunPython(skills, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(basefirearms, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(ranged_weapon_templates, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(weapon_templates,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(character_log_entries,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(character_skills,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(edge_skill_bonuses,
                             reverse_code=migrations.RunPython.noop),

    ]

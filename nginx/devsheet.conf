upstream sheet_app_server_dev {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
 
  server unix:/home/sjl/p/aesheet-dev/run/gunicorn.sock fail_timeout=0;
}

#server {
# 
#    listen   80;
#    server_name devsheet.liskot.org;
#    return 301 https://devsheet.liskot.org$request_uri;
#}

server {
    listen 443 ssl;

    server_name devsheet.liskot.org;

    include /etc/nginx/ssl.conf;
 
    client_max_body_size 4G;
 
    access_log /home/sjl/p/aesheet-dev/logs/nginx-access.log;
    error_log /home/sjl/p/aesheet-dev/logs/nginx-error.log;

    location /static/ {
        alias   /home/sjl/p/aesheet-dev/static/;
    }
    
    location /media/ {
        alias   /home/sjl/p/aesheet-dev/upload/;
    }
 
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /home/sjl/p/aesheet-dev/static;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto $scheme;
 
        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;
 
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
 
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://sheet_app_server_dev;
#	    error_page 500 502 503 504 /500.html;
            break;
        }
#    # Error pages
#    error_page 500 502 503 504 /500.html;
    }
 
}
